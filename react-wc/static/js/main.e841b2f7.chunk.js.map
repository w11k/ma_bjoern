{"version":3,"sources":["typings.ts","constants.tsx","components/About.tsx","components/Menu.tsx","components/Settings.tsx","model.ts","components/ListItem.tsx","components/List.tsx","components/Tabs.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["ListTypes","SheetActions","pages","todos","url","title","icon","tabs","_tabs","Object","defineProperty","ALL","concat","ACTIVE","COMPLETED","settings","about","AboutComponent","this","props","setTitle","react_default","a","createElement","React","Component","withRouter","role","values","map","page","onClick","history","push","closeDrawer","key","SettingsComponent","Model","classCallCheck","storage","items","Array","createClass","value","id","find","item","arguments","length","undefined","Date","getTime","trim","completed","data","index","findIndex","assign","toConsumableArray","slice","reduce","count","active","all","store","ListItemComponent","menu","createRef","checkbox","handleContextMenuClick","event","element","target","includes","dataset","action","_this","onSheetAction","handleCheckboxChange","onChange","checked","_this2","current","renderer","root","listBox","firstElementChild","document","setAttribute","classList","add","innerHTML","EDIT","DELETE","CANCEL","querySelectorAll","forEach","addEventListener","appendChild","_this3","querySelector","removeEventListener","ref","className","ListComponent","possibleConstructorReturn","getPrototypeOf","call","handleSheetClose","presentAlertPrompt","model","deleteItem","setTimeout","newTitle","window","prompt","alert","updateItem","listType","type","list","getAllItems","filter","NONE","ListItem","c","view","TabsComponent","state","activeTab","handleChangeIndex","setState","createItem","entries","_ref","_ref2","slicedToArray","tab","label","getCount","for","selected","es","onChangeIndex","Route","path","render","List","AppComponent","drawerPersistent","drawer","layout","handleLayoutChange","detail","handleDrawerClose","close","narrow","BrowserRouter","basename","Switch","strict","process","HashRouter","forceNarrow","slot","swipe-open","Menu","effects","reveals","drawer-toggle","main-title","Tabs","Settings","About","Redirect","to","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","react","App","URL","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","scope"],"mappings":"2HAwBYA,EAOAC,8HAPAD,4FAOAC,iEC5BL,IAEMC,EAAQ,CACjBC,MAAO,CACHC,IAAK,SACLC,MAAO,QACPC,KAAM,OACNC,MAAIC,EAAA,GAAAC,OAAAC,EAAA,EAAAD,CAAAD,EACCR,EAAUW,IAAM,CACbP,IAAG,UAAAQ,OAAYZ,EAAUW,KACzBN,MAAO,MACPC,KAAM,SAJVG,OAAAC,EAAA,EAAAD,CAAAD,EAMCR,EAAUa,OAAS,CAChBT,IAAG,UAAAQ,OAAYZ,EAAUa,QACzBR,MAAO,SACPC,KAAM,4BATVG,OAAAC,EAAA,EAAAD,CAAAD,EAWCR,EAAUc,UAAY,CACnBV,IAAG,UAAAQ,OAAYZ,EAAUc,WACzBT,MAAO,YACPC,KAAM,cAdVE,IAkBRO,SAAU,CACNX,IAAK,YACLC,MAAO,WACPC,KAAM,YAGVU,MAAO,CACHZ,IAAK,SACLC,MAAO,QACPC,KAAM,SCxBCW,8LARPC,KAAKC,MAAMC,SAASF,KAAKC,MAAMd,wCAI/B,OAAOgB,EAAAC,EAAAC,cAAA,0BANcC,IAAMC,oBCwBpBC,kBAtBf,SAAuBP,GACnB,OACIE,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,OAAKI,KAAK,WACLlB,OAAOmB,OAAO1B,GAAO2B,IAAI,SAACC,GAAD,OACtBT,EAAAC,EAAAC,cAAA,cACIQ,QAAS,WACLZ,EAAMa,QAAQC,KAAKH,EAAK1B,KACxBe,EAAMe,eAEVC,IAAKL,EAAKzB,OACVgB,EAAAC,EAAAC,cAAA,aAAWjB,KAAMwB,EAAKxB,OACrBwB,EAAKzB,MACNgB,EAAAC,EAAAC,cAAA,4BCNTa,8LARPlB,KAAKC,MAAMC,SAASF,KAAKC,MAAMd,wCAI/B,OAAOgB,EAAAC,EAAAC,cAAA,0BANiBC,IAAMC,mDCCzBY,EAAb,WAGI,SAAAA,IAAe5B,OAAA6B,EAAA,EAAA7B,CAAAS,KAAAmB,GACXnB,KAAKqB,QAAUA,IACfrB,KAAKqB,QAAQC,MAAQtB,KAAKqB,QAAQC,OAAS,IAAIC,MALvD,OAAAhC,OAAAiC,EAAA,EAAAjC,CAAA4B,EAAA,EAAAF,IAAA,cAAAQ,MAAA,WASQ,OAAOzB,KAAKqB,QAAQC,QAT5B,CAAAL,IAAA,UAAAQ,MAAA,SAYYC,GACJ,OAAO1B,KAAKqB,QAAQC,MAAMK,KAAK,SAACC,GAAD,OAAUA,EAAKF,KAAOA,MAb7D,CAAAT,IAAA,aAAAQ,MAAA,WAgByC,IAA1BtC,EAA0B0C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAV,GACjBD,EAAO,CACTF,IAAI,IAAIM,MAAOC,UACf9C,MAAOA,EAAM+C,OACbC,WAAW,GAEfnC,KAAKqB,QAAQC,MAAQtB,KAAKqB,QAAQC,MAAM5B,OAAOkC,KAtBvD,CAAAX,IAAA,aAAAQ,MAAA,SAyBeC,EAAYU,GACnB,IAAMC,EAAQrC,KAAKqB,QAAQC,MAAMgB,UAAU,SAACV,GAAD,OAAUA,EAAKF,KAAOA,IACjE,KAAIW,EAAQ,GAAZ,CAGA,IAAMT,EAAOrC,OAAOgD,OAAOvC,KAAKqB,QAAQC,MAAMe,GAAQD,GACtDpC,KAAKqB,QAAQC,MAAb/B,OAAAiD,EAAA,EAAAjD,CAAyBS,KAAKqB,QAAQC,MAAMmB,MAAM,EAAGJ,IAArD3C,OAAA,CAA6DkC,GAA7DrC,OAAAiD,EAAA,EAAAjD,CAAsES,KAAKqB,QAAQC,MAAMmB,MAAMJ,EAAQ,QA/B/G,CAAApB,IAAA,aAAAQ,MAAA,SAkCeC,GACP,IAAMW,EAAQrC,KAAKqB,QAAQC,MAAMgB,UAAU,SAACV,GAAD,OAAUA,EAAKF,KAAOA,IAC7DW,EAAQ,IAGZrC,KAAKqB,QAAQC,MAAb/B,OAAAiD,EAAA,EAAAjD,CAAyBS,KAAKqB,QAAQC,MAAMmB,MAAM,EAAGJ,IAArD3C,OAAAH,OAAAiD,EAAA,EAAAjD,CAAgES,KAAKqB,QAAQC,MAAMmB,MAAMJ,EAAQ,QAvCzG,CAAApB,IAAA,WAAAQ,MAAA,WA2CQ,OAAOzB,KAAKqB,QAAQC,MAAMoB,OAAO,SAACC,EAAOf,GACrC,MAAO,CACHgB,OAAQD,EAAMC,UAAWhB,EAAKO,UAC9BA,UAAWQ,EAAMR,YAAaP,EAAKO,UACnCU,MAAOF,EAAME,MAElB,CACCD,OAAQ,EACRT,UAAW,EACXU,IAAK,QApDjB1B,EAAA,GAyDe2B,cAAM,IAAI3B,GCwBV4B,6MAhFHC,KAA4C1C,IAAM2C,cAClDC,SAAkD5C,IAAM2C,cAEhEE,uBAAyB,SAACC,GACtB,IAAMC,EAAUD,EAAME,OAClB/D,OAAOmB,OAAO3B,GAAcwE,SAASF,EAAQG,QAAQC,SACrDC,EAAKzD,MAAM0D,cAAcN,EAAQG,QAAQC,WAIjDG,qBAAuB,SAACR,GACpB,IAAMC,EAAUD,EAAME,OACtBI,EAAKzD,MAAM4D,SAASR,EAAQS,6FAGZ,IAAAC,EAAA/D,KACZA,KAAKgD,KAAKgB,UACVhE,KAAKgD,KAAKgB,QAAQC,SAAW,SAACC,GAC1B,IAAIC,EAAUD,EAAKE,kBACdD,KACDA,EAAUE,SAAShE,cAAc,QACzBiE,aAAa,OAAQ,WAC7BH,EAAQI,UAAUC,IAAI,aACtBL,EAAQM,UAAR,sDAAA/E,OAC+BX,EAAa2F,KAD5C,oCAAAhF,OAEUX,EAAa2F,KAFvB,2IAAAhF,OAK+BX,EAAa4F,OAL5C,oCAAAjF,OAMUX,EAAa4F,OANvB,yKAAAjF,OAU+BX,EAAa6F,OAV5C,oCAAAlF,OAWUX,EAAa6F,OAXvB,8GAeAT,EAAQU,iBAAiB,cAAcC,QAAQ,SAAClD,GAC5CA,EAAKmD,iBAAiB,QAAShB,EAAKZ,0BAExCe,EAAKc,YAAYb,MAKzBnE,KAAKkD,SAASc,SACdhE,KAAKkD,SAASc,QAAQe,iBAAiB,SAAU/E,KAAK4D,qEAIvC,IAAAqB,EAAAjF,KACnB,GAAIA,KAAKgD,KAAKgB,QAAS,CACnB,IAAMG,EAAUnE,KAAKgD,KAAKgB,QAAQkB,cAAc,cAC5Cf,GACAA,EAAQU,iBAAiB,cAAcC,QAAQ,SAAClD,GAC5CA,EAAKuD,oBAAoB,QAASF,EAAK9B,0BAK/CnD,KAAKkD,SAASc,SACdhE,KAAKkD,SAASc,QAAQmB,oBAAoB,SAAUnF,KAAK4D,uDAK7D,OACIzD,EAAAC,EAAAC,cAAA,uBAAqB+E,IAAKpF,KAAKgD,MAC3B7C,EAAAC,EAAAC,cAAA,kBACIF,EAAAC,EAAAC,cAAA,iBAAAd,OAAAgD,OAAA,CACI6C,IAAKpF,KAAKkD,UACNlD,KAAKC,MAAM2B,KAAKO,UAAY,CAAC2B,SAAS,GAAQ,KACtD3D,EAAAC,EAAAC,cAAA,QAAMgF,UAAU,SAASrF,KAAKC,MAAM2B,KAAKzC,gBA1E7BmB,IAAMC,WCEhC+E,cAIF,SAAAA,EAAYrF,GAA2B,IAAAyD,EAAA,OAAAnE,OAAA6B,EAAA,EAAA7B,CAAAS,KAAAsF,IACnC5B,EAAAnE,OAAAgG,EAAA,EAAAhG,CAAAS,KAAAT,OAAAiG,EAAA,EAAAjG,CAAA+F,GAAAG,KAAAzF,KAAMC,KAqCFyF,iBAAmB,SAACjC,EAAsB7B,GAC9C,OAAQ6B,GACJ,KAAK1E,EAAa2F,KACdhB,EAAKiC,mBAAmB/D,GACxB,MACJ,KAAK7C,EAAa4F,OACdjB,EAAKkC,MAAMC,WAAWjE,EAAKF,IAC3B,MACJ,KAAK3C,EAAa6F,UA9CalB,EAqD/BiC,mBAAqB,SAAC/D,GAC1BkE,WAAW,WACP,IAAMC,EAAWC,OAAOC,OAAO,YAAarE,EAAKzC,OACjD,GAAwB,kBAAb4G,EAEJ,MAAwB,KAApBA,EAAS7D,OACT8D,OAAOE,MAAM,aACbtE,EAAKzC,QAAU4G,EACfC,OAAOE,MAAM,mBAExBxC,EAAKkC,MAAMO,WAAWvE,EAAKF,GAAI,CAACvC,MAAO4G,KACxC,MA9DHrC,EAAKkC,MAAQA,EACblC,EAAK0C,SAAW1C,EAAKzD,MAAMoG,KAHQ3C,wEAM9B,IAAAK,EAAA/D,KACCsG,EAAOtG,KAAK4F,MAAMW,cACnBC,OAAO,SAAC5E,GACL,OAAQmC,EAAKqC,UACT,KAAKtH,EAAUW,IACX,OAAO,EACX,KAAKX,EAAUa,OACX,OAAQiC,EAAKO,UACjB,KAAKrD,EAAUc,UACX,OAAOgC,EAAKO,UAChB,KAAKrD,EAAU2H,KACf,QACI,OAAO,KAGlB9F,IAAI,SAACiB,GAAD,OACDzB,EAAAC,EAAAC,cAACqG,EAAD,CACI9E,KAAMA,EACNX,IAAKW,EAAKF,GACVmC,SAAU,SAAC8C,GAAD,OAAgB5C,EAAK6B,MAAMO,WAAWvE,EAAKF,GAAI,CAACS,UAAWwE,KACrEhD,cAAe,SAACvD,GAAD,OAAqB2D,EAAK2B,iBAAiBtF,EAAGwB,QAGzE,OACIzB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKgF,UAAU,kBACViB,WApCOhG,IAAMC,WAwEnBqG,cAAKtB,GCrEduB,cAMF,SAAAA,EAAY5G,GAA2B,IAAAyD,EAAA,OAAAnE,OAAA6B,EAAA,EAAA7B,CAAAS,KAAA6G,IACnCnD,EAAAnE,OAAAgG,EAAA,EAAAhG,CAAAS,KAAAT,OAAAiG,EAAA,EAAAjG,CAAAsH,GAAApB,KAAAzF,KAAMC,KANV6G,MAA4B,CACxBC,UAAW,GAIwBrD,EASvCsD,kBAAoB,SAACvF,GACjBiC,EAAKuD,SAAS,CAACF,UAAWtF,KAVSiC,EA0C/BiC,mBAAqB,WACzBG,WAAW,WACP,IAAMC,EAAWC,OAAOC,OAAO,eAC/B,GAAwB,kBAAbF,EAEJ,MAAwB,KAApBA,EAAS7D,OACT8D,OAAOE,MAAM,kBAExBxC,EAAKkC,MAAMsB,WAAWnB,IACvB,MAjDHrC,EAAKkC,MAAQA,EAFsBlC,mFAMnC1D,KAAKC,MAAMC,SAASF,KAAKC,MAAMd,wCAO1B,IAAA4E,EAAA/D,KACEc,EAAWd,KAAKC,MAAhBa,QACDzB,EAAOE,OAAO4H,QAAQnI,EAAMC,MAAMI,MAAMsB,IAAI,SAAAyG,GAAA,IAAAC,EAAA9H,OAAA+H,EAAA,EAAA/H,CAAA6H,EAAA,GAAEnG,EAAFoG,EAAA,GAAOE,EAAPF,EAAA,UAC9ClH,EAAAC,EAAAC,cAAA,aAAWY,IAAKsG,EAAIpI,MAAO0B,QAAS,kBAAMC,EAAQC,KAAKwG,EAAIrI,OACvDiB,EAAAC,EAAAC,cAAA,aAAWjB,KAAMmI,EAAInI,KAAMsC,GAAI,MAAQ,CAACT,KACxCd,EAAAC,EAAAC,cAAA,YAAOkH,EAAIpI,OACXgB,EAAAC,EAAAC,cAAA,eAAamH,MAAOzD,EAAK6B,MAAM6B,WAAWxG,GAC7ByG,IAAK,MAAQ,CAACzG,QAGnC,OACId,EAAAC,EAAAC,cAAA,OAAKgF,UAAU,iBACXlF,EAAAC,EAAAC,cAAA,cAAYsH,SAAU3H,KAAK8G,MAAMC,WAC5B1H,GAELc,EAAAC,EAAAC,cAACuH,EAAA,EAAD,CAAiBvF,MAAOrC,KAAK8G,MAAMC,UAAWc,cAAe7H,KAAKgH,mBAC9D7G,EAAAC,EAAAC,cAACyH,EAAA,EAAD,CAAOC,KAAM/I,EAAMC,MAAMI,KAAKP,EAAUW,KAAKP,IACtC8I,OAAQ,SAAC/H,GAAD,OAAWE,EAAAC,EAAAC,cAAC4H,EAAD1I,OAAAgD,OAAA,CAAM8D,KAAMvH,EAAUW,KAASQ,OACzDE,EAAAC,EAAAC,cAACyH,EAAA,EAAD,CAAOC,KAAM/I,EAAMC,MAAMI,KAAKP,EAAUa,QAAQT,IACzC8I,OAAQ,SAAC/H,GAAD,OAAWE,EAAAC,EAAAC,cAAC4H,EAAD1I,OAAAgD,OAAA,CAAM8D,KAAMvH,EAAUa,QAAYM,OAC5DE,EAAAC,EAAAC,cAACyH,EAAA,EAAD,CAAOC,KAAM/I,EAAMC,MAAMI,KAAKP,EAAUc,WAAWV,IAC5C8I,OAAQ,SAAC/H,GAAD,OAAWE,EAAAC,EAAAC,cAAC4H,EAAD1I,OAAAgD,OAAA,CAAM8D,KAAMvH,EAAUc,WAAeK,QAEnEE,EAAAC,EAAAC,cAAA,aAAWjB,KAAK,MAAMyB,QAASb,KAAK2F,6BA1CxBrF,IAAMC,WA6DnBC,cAAWoG,YAAKC,ICYhBqB,6MAtEXpB,MAA2B,CACvB3H,MAAO,QACPgJ,kBAAkB,KAGdC,OAA4C9H,IAAM2C,cAClDoF,OAAkD/H,IAAM2C,cAShEqF,mBAAqB,SAAClF,GAClBM,EAAKuD,SAAS,CAACkB,kBAAmB/E,EAAMmF,OAAO9G,WAGnD+G,kBAAoB,WACZ9E,EAAK0E,OAAOpE,UAAYN,EAAKoD,MAAMqB,kBACnCzE,EAAK0E,OAAOpE,QAAQyE,WAI5BvI,SAAW,SAACf,GACRuE,EAAKuD,SAAS,CAAC9H,MAAOA,wFAjBlBa,KAAKqI,OAAOrE,UACZhE,KAAK8G,MAAMqB,kBAAoBnI,KAAKqI,OAAOrE,QAAQ0E,OACnD1I,KAAKqI,OAAOrE,QAAQe,iBAAiB,iBAAkB/E,KAAKsI,sDAkB3D,IAAAvE,EAAA/D,KACL,OACIG,EAAAC,EAAAC,cAACsI,EAAA,EAAD,CAAeC,SAAS,KACpBzI,EAAAC,EAAAC,cAACwI,EAAA,EAAD,KACI1I,EAAAC,EAAAC,cAACyH,EAAA,EAAD,CAAOgB,QAAM,EAACf,KAAMgB,wBAChB5I,EAAAC,EAAAC,cAAC2I,EAAA,EAAD,KACI7I,EAAAC,EAAAC,cAAA,qBAAmB4I,aAAa,EAAM7D,IAAKpF,KAAKqI,QAC5ClI,EAAAC,EAAAC,cAAA,cAAY6I,KAAK,SAASC,aAAW,OAAO/D,IAAKpF,KAAKoI,QAClDjI,EAAAC,EAAAC,cAAC+I,EAAD,CAAMpI,YAAa,kBAAM+C,EAAKyE,wBAElCrI,EAAAC,EAAAC,cAAA,yBACIF,EAAAC,EAAAC,cAAA,cAAYgJ,QAAQ,YAAYC,SAAO,EAACJ,KAAK,UACzC/I,EAAAC,EAAAC,cAAA,oBACML,KAAK8G,MAAMqB,kBACbhI,EAAAC,EAAAC,cAAA,qBAAmBkJ,iBAAA,EAAcnK,KAAK,SACtCe,EAAAC,EAAAC,cAAA,OAAKmJ,aAAW,QAAQxJ,KAAK8G,MAAM3H,SAG3CgB,EAAAC,EAAAC,cAACwI,EAAA,EAAD,KACI1I,EAAAC,EAAAC,cAACyH,EAAA,EAAD,CAAOC,KAAM/I,EAAMC,MAAMC,IAAK8I,OAAQ,SAAC/H,GAAD,OAAWE,EAAAC,EAAAC,cAACoJ,EAADlK,OAAAgD,OAAA,GAAUtC,EAAV,CACMd,MAAOH,EAAMC,MAAME,MACnBe,SAAU6D,EAAK7D,eACtEC,EAAAC,EAAAC,cAACyH,EAAA,EAAD,CAAOC,KAAM/I,EAAMa,SAASX,IAAK8I,OAAQ,SAAC/H,GAAD,OAAWE,EAAAC,EAAAC,cAACqJ,EAADnK,OAAAgD,OAAA,GAActC,EAAd,CACUd,MAAOH,EAAMa,SAASV,MACtBe,SAAU6D,EAAK7D,eAC7EC,EAAAC,EAAAC,cAACyH,EAAA,EAAD,CAAOC,KAAM/I,EAAMc,MAAMZ,IAAK8I,OAAQ,SAAC/H,GAAD,OAAWE,EAAAC,EAAAC,cAACsJ,EAADpK,OAAAgD,OAAA,GAAWtC,EAAX,CACOd,MAAOH,EAAMc,MAAMX,MACnBe,SAAU6D,EAAK7D,eACvEC,EAAAC,EAAAC,cAACuJ,EAAA,EAAD,CAAUC,GAAI7K,EAAMC,MAAMI,KAAKwD,IAAI3D,WAMvDiB,EAAAC,EAAAC,cAACuJ,EAAA,EAAD,CAAUC,GAAId,kCAhEPzI,IAAMC,WCC3BuJ,UAAcC,QACa,cAA7B/D,OAAOgE,SAASC,UAEa,UAA7BjE,OAAOgE,SAASC,UAEhBjE,OAAOgE,SAASC,SAASC,MACrB,4DA+CR,SAASC,EAAgBC,EAAeC,GACpCC,UAAUC,cACLC,SAASJ,EAAOC,GAChBI,KAAK,SAAAC,GACFA,EAAaC,cAAgB,WACzB,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACE,cAA3BF,EAAiB9D,QACbwD,UAAUC,cAAcQ,YAIxBC,QAAQC,IACJ,gHAKAZ,GAAUA,EAAOa,UACjBb,EAAOa,SAASR,KAMpBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACjBd,EAAOc,UAAUT,UAOxCU,MAAM,SAAAC,GACHL,QAAQK,MAAM,4CAA6CA,wHClGvEC,SAAgBC,EAAA,cAACC,EAAD,MAAQnH,SAASa,cAAc,UDqBxC,SAAkBmF,GACrB,GAA6C,kBAAmBC,UAAW,CAMvE,GAJkB,IAAImB,IACjB1C,sBACD/C,OAAOgE,SAAS0B,MAENC,SAAW3F,OAAOgE,SAAS2B,OAIrC,OAGJ3F,OAAOjB,iBAAiB,OAAQ,WAC5B,IAAMqF,EAAK,GAAA1K,OAAMqJ,sBAAN,sBAEPe,GAgEhB,SAAiCM,EAAeC,GAE5CuB,MAAMxB,GACDK,KAAK,SAAAoB,GAEF,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEjB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAM1B,KAAK,SAAAC,GAC/BA,EAAa0B,aAAa3B,KAAK,WAC3BzE,OAAOgE,SAASqC,aAKxBlC,EAAgBC,EAAOC,KAG9Be,MAAM,WACHJ,QAAQC,IACJ,mEArFAqB,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAM1B,KAAK,WAC/BO,QAAQC,IACJ,+GAMRd,EAAgBC,EAAOC,MCjDvCG,CAAS,CAAC+B,MAAOxD","file":"static/js/main.e841b2f7.chunk.js","sourcesContent":["import {RouteComponentProps} from 'react-router';\n\nexport type Storage = {\n    items: Array<Item>\n}\n\nexport type Item = {\n    id: number;\n    title: string;\n    completed: boolean;\n}\n\nexport type ItemUpdate = {\n    title?: string;\n    completed?: boolean;\n}\n\nexport type Count = {\n    active: number;\n    completed: number;\n    all: number;\n    [key: string]: number;\n}\n\nexport enum ListTypes {\n    ALL = 'all',\n    ACTIVE = 'active',\n    COMPLETED = 'completed',\n    NONE = 'none'\n}\n\nexport enum SheetActions {\n    EDIT = 'Edit',\n    DELETE = 'Delete',\n    CANCEL = 'Cancel'\n}\n\nexport type MenuComponentProps = RouteComponentProps & {\n    closeDrawer: () => void;\n};\n\nexport type ListComponentProps = {\n    type: ListTypes;\n};\n\nexport type TabsComponentProps = TitleProps & RouteComponentProps;\n\nexport type AppComponentState = {\n    title: string;\n    drawerPersistent: boolean;\n};\n\nexport type TabsComponentState = {\n    activeTab: number;\n};\n\nexport type TitleProps = {\n    setTitle: (title: string) => void;\n    title: string;\n}\n\nexport type ListItemComponentProps = {\n    onChange: (c: boolean) => void;\n    onSheetAction: (a: SheetActions) => void;\n    item: Item;\n}\n\nexport type ContextMenuElement = HTMLElement & {\n    renderer: (root: HTMLElement) => void\n}","import React from 'react';\nimport {ListTypes} from './typings';\n\nexport const drawerWidth = 240;\n\nexport const pages = {\n    todos: {\n        url: '/todos',\n        title: 'Todos',\n        icon: 'list',\n        tabs: {\n            [ListTypes.ALL]: {\n                url: `/todos/${ListTypes.ALL}`,\n                title: 'All',\n                icon: 'list'\n            },\n            [ListTypes.ACTIVE]: {\n                url: `/todos/${ListTypes.ACTIVE}`,\n                title: 'Active',\n                icon: 'check-box-outline-blank'\n            },\n            [ListTypes.COMPLETED]: {\n                url: `/todos/${ListTypes.COMPLETED}`,\n                title: 'Completed',\n                icon: 'check-box'\n            }\n        }\n    },\n    settings: {\n        url: '/settings',\n        title: 'Settings',\n        icon: 'settings'\n    }\n    ,\n    about: {\n        url: '/about',\n        title: 'About',\n        icon: 'info'\n    }\n};","import React from 'react';\nimport {TitleProps} from '../typings';\n\nclass AboutComponent extends React.Component<TitleProps> {\n    componentDidMount() {\n        this.props.setTitle(this.props.title);\n    }\n\n    render() {\n        return <div>test</div>;\n    }\n}\n\nexport default AboutComponent;","import React from 'react';\nimport {withRouter} from 'react-router-dom';\nimport {pages} from '../constants';\nimport {MenuComponentProps} from '../typings';\n\nfunction MenuComponent(props: MenuComponentProps) {\n    return (\n        <div>\n            <app-toolbar>Menu</app-toolbar>\n            <div role=\"listbox\">\n                {Object.values(pages).map((page) => (\n                    <paper-item\n                        onClick={() => {\n                            props.history.push(page.url);\n                            props.closeDrawer();\n                        }}\n                        key={page.title}>\n                        <iron-icon icon={page.icon}/>\n                        {page.title}\n                        <paper-ripple/>\n                    </paper-item>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default withRouter(MenuComponent);","import React from 'react';\nimport {TitleProps} from '../typings';\n\nclass SettingsComponent extends React.Component<TitleProps> {\n    componentDidMount() {\n        this.props.setTitle(this.props.title);\n    }\n\n    render() {\n        return <div>test</div>;\n    }\n}\n\nexport default SettingsComponent;","import {storage} from 'react-easy-params';\nimport {store} from 'react-easy-state';\nimport {Count, Item, ItemUpdate, Storage} from './typings';\n\nexport class Model {\n    private storage: Storage;\n\n    constructor() {\n        this.storage = storage as unknown as Storage;\n        this.storage.items = this.storage.items || new Array<Item>();\n    }\n\n    getAllItems(): Array<Item> {\n        return this.storage.items;\n    };\n\n    getItem(id: number): Item | undefined {\n        return this.storage.items.find((item) => item.id === id);\n    };\n\n    createItem(title: string = ''): void {\n        const item = {\n            id: new Date().getTime(),\n            title: title.trim(),\n            completed: false\n        };\n        this.storage.items = this.storage.items.concat(item);\n    };\n\n    updateItem(id: number, data: ItemUpdate): void {\n        const index = this.storage.items.findIndex((item) => item.id === id);\n        if (index < 0) {\n            return;\n        }\n        const item = Object.assign(this.storage.items[index], data);\n        this.storage.items = [...this.storage.items.slice(0, index), item, ...this.storage.items.slice(index + 1)]; // immutable splice\n    };\n\n    deleteItem(id: number): void {\n        const index = this.storage.items.findIndex((item) => item.id === id);\n        if (index < 0) {\n            return;\n        }\n        this.storage.items = [...this.storage.items.slice(0, index), ...this.storage.items.slice(index + 1)]; // immutable splice\n    };\n\n    getCount(): Count {\n        return this.storage.items.reduce((count, item) => {\n            return {\n                active: count.active + +!item.completed,\n                completed: count.completed + +item.completed,\n                all: ++count.all\n            };\n        }, {\n            active: 0,\n            completed: 0,\n            all: 0\n        });\n    };\n}\n\nexport default store(new Model());","import {PaperCheckboxElement} from '@polymer/paper-checkbox/paper-checkbox';\nimport React from 'react';\nimport {ContextMenuElement, ListItemComponentProps, SheetActions} from '../typings';\n\nclass ListItemComponent extends React.Component<ListItemComponentProps> {\n    private menu: React.RefObject<ContextMenuElement> = React.createRef<ContextMenuElement>();\n    private checkbox: React.RefObject<PaperCheckboxElement> = React.createRef<PaperCheckboxElement>();\n\n    handleContextMenuClick = (event: MouseEvent) => {\n        const element = event.target as HTMLElement;\n        if (Object.values(SheetActions).includes(element.dataset.action)) {\n            this.props.onSheetAction(element.dataset.action as SheetActions);\n        }\n    };\n\n    handleCheckboxChange = (event: Event) => {\n        const element = event.target as HTMLInputElement;\n        this.props.onChange(element.checked);\n    };\n\n    componentDidMount() {\n        if (this.menu.current) {\n            this.menu.current.renderer = (root: HTMLElement) => {\n                let listBox = root.firstElementChild;\n                if (!listBox) {\n                    listBox = document.createElement('div');\n                    listBox.setAttribute('role', 'listbox');\n                    listBox.classList.add('menu_list');\n                    listBox.innerHTML = `\n                        <paper-item data-action=\"${SheetActions.EDIT}\">\n                            ${SheetActions.EDIT}\n                            <paper-ripple/>\n                        </paper-item>\n                        <paper-item data-action=\"${SheetActions.DELETE}\">\n                            ${SheetActions.DELETE}\n                            <paper-ripple/>\n                        </paper-item>\n                        <hr>\n                        <paper-item data-action=\"${SheetActions.CANCEL}\">\n                            ${SheetActions.CANCEL}\n                            <paper-ripple/>\n                        </paper-item>\n                    `;\n                    listBox.querySelectorAll('paper-item').forEach((item) => {\n                        item.addEventListener('click', this.handleContextMenuClick);\n                    });\n                    root.appendChild(listBox);\n                }\n            };\n        }\n\n        if (this.checkbox.current) {\n            this.checkbox.current.addEventListener('change', this.handleCheckboxChange);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.menu.current) {\n            const listBox = this.menu.current.querySelector('.menu_list');\n            if (listBox) {\n                listBox.querySelectorAll('paper-item').forEach((item) => {\n                    item.removeEventListener('click', this.handleContextMenuClick);\n                });\n            }\n        }\n\n        if (this.checkbox.current) {\n            this.checkbox.current.removeEventListener('change', this.handleCheckboxChange);\n        }\n    }\n\n    render() {\n        return (\n            <vaadin-context-menu ref={this.menu}>\n                <paper-item>\n                    <paper-checkbox\n                        ref={this.checkbox}\n                        {...this.props.item.completed ? {checked: true} : {}}/>\n                    <span className=\"label\">{this.props.item.title}</span>\n                </paper-item>\n            </vaadin-context-menu>\n        );\n    }\n}\n\nexport default ListItemComponent;","import React from 'react';\nimport {view} from 'react-easy-state';\nimport model, {Model} from '../model';\nimport {Item, ListComponentProps, ListTypes, SheetActions} from '../typings';\nimport ListItem from './ListItem';\n\nclass ListComponent extends React.Component<ListComponentProps> {\n    private listType: ListTypes;\n    private model: Model;\n\n    constructor(props: ListComponentProps) {\n        super(props);\n        this.model = model as unknown as Model;\n        this.listType = this.props.type;\n    }\n\n    render() {\n        const list = this.model.getAllItems()\n            .filter((item: Item) => {\n                switch (this.listType) {\n                    case ListTypes.ALL:\n                        return true;\n                    case ListTypes.ACTIVE:\n                        return !item.completed;\n                    case ListTypes.COMPLETED:\n                        return item.completed;\n                    case ListTypes.NONE:\n                    default:\n                        return false;\n                }\n            })\n            .map((item: Item) => (\n                <ListItem\n                    item={item}\n                    key={item.id}\n                    onChange={(c: boolean) => this.model.updateItem(item.id, {completed: c})}\n                    onSheetAction={(a: SheetActions) => this.handleSheetClose(a, item)}\n                />\n            ));\n        return (\n            <div>\n                <div className=\"list-container\">\n                    {list}\n                </div>\n            </div>\n        );\n    }\n\n    private handleSheetClose = (action: SheetActions, item: Item) => {\n        switch (action) {\n            case SheetActions.EDIT:\n                this.presentAlertPrompt(item);\n                break;\n            case SheetActions.DELETE:\n                this.model.deleteItem(item.id);\n                break;\n            case SheetActions.CANCEL:\n            default:\n                break;\n        }\n    };\n\n\n    private presentAlertPrompt = (item: Item) => {\n        setTimeout(() => {\n            const newTitle = window.prompt('Edit Item', item.title);\n            if (typeof newTitle !== 'string') {\n                return;\n            } else if (newTitle.trim() === '') {\n                return window.alert('No input!');\n            } else if (item.title === newTitle) {\n                return window.alert('No change!');\n            }\n            this.model.updateItem(item.id, {title: newTitle});\n        }, 300);\n    };\n}\n\nexport default view(ListComponent);","import React from 'react';\nimport {view} from 'react-easy-state';\nimport {Route, withRouter} from 'react-router-dom';\nimport SwipeableRoutes from 'react-swipeable-routes';\nimport {pages} from '../constants';\nimport model, {Model} from '../model';\nimport {ListTypes, TabsComponentProps, TabsComponentState} from '../typings';\nimport List from './List';\n\nclass TabsComponent extends React.Component<TabsComponentProps, TabsComponentState> {\n    state: TabsComponentState = {\n        activeTab: 0\n    };\n    private model: Model;\n\n    constructor(props: TabsComponentProps) {\n        super(props);\n        this.model = model as unknown as Model;\n    }\n\n    componentDidMount() {\n        this.props.setTitle(this.props.title);\n    }\n\n    handleChangeIndex = (value: number) => {\n        this.setState({activeTab: value});\n    };\n\n    render() {\n        const {history} = this.props;\n        const tabs = Object.entries(pages.todos.tabs).map(([key, tab]) => (\n            <paper-tab key={tab.title} onClick={() => history.push(tab.url)}>\n                <iron-icon icon={tab.icon} id={'tab' + [key]}/>\n                <span>{tab.title}</span>\n                <paper-badge label={this.model.getCount()[key]}\n                             for={'tab' + [key]}/>\n            </paper-tab>\n        ));\n        return (\n            <div className=\"tab-container\">\n                <paper-tabs selected={this.state.activeTab}>\n                    {tabs}\n                </paper-tabs>\n                <SwipeableRoutes index={this.state.activeTab} onChangeIndex={this.handleChangeIndex}>\n                    <Route path={pages.todos.tabs[ListTypes.ALL].url}\n                           render={(props) => <List type={ListTypes.ALL} {...props}/>}/>\n                    <Route path={pages.todos.tabs[ListTypes.ACTIVE].url}\n                           render={(props) => <List type={ListTypes.ACTIVE} {...props}/>}/>\n                    <Route path={pages.todos.tabs[ListTypes.COMPLETED].url}\n                           render={(props) => <List type={ListTypes.COMPLETED} {...props}/>}/>\n                </SwipeableRoutes>\n                <paper-fab icon=\"add\" onClick={this.presentAlertPrompt}/>\n            </div>\n        );\n    }\n\n\n    private presentAlertPrompt = () => {\n        setTimeout(() => {\n            const newTitle = window.prompt('Create Item');\n            if (typeof newTitle !== 'string') {\n                return;\n            } else if (newTitle.trim() === '') {\n                return window.alert('No input!');\n            }\n            this.model.createItem(newTitle);\n        }, 300);\n    };\n}\n\nexport default withRouter(view(TabsComponent));","import {AppDrawerLayoutElement} from '@polymer/app-layout/app-drawer-layout/app-drawer-layout';\nimport {AppDrawerElement} from '@polymer/app-layout/app-drawer/app-drawer';\nimport React from 'react';\nimport {BrowserRouter, HashRouter, Redirect, Route, Switch} from 'react-router-dom';\nimport {pages} from '../constants';\nimport {AppComponentState} from '../typings';\nimport About from './About';\nimport Menu from './Menu';\nimport Settings from './Settings';\nimport Tabs from './Tabs';\n\nclass AppComponent extends React.Component<{}, AppComponentState> {\n    state: AppComponentState = {\n        title: 'Todos',\n        drawerPersistent: true\n    };\n\n    private drawer: React.RefObject<AppDrawerElement> = React.createRef<AppDrawerElement>();\n    private layout: React.RefObject<AppDrawerLayoutElement> = React.createRef<AppDrawerLayoutElement>();\n\n    componentDidMount(): void {\n        if (this.layout.current) {\n            this.state.drawerPersistent = !this.layout.current.narrow;\n            this.layout.current.addEventListener('narrow-changed', this.handleLayoutChange as EventListener);\n        }\n    }\n\n    handleLayoutChange = (event: CustomEvent) => {\n        this.setState({drawerPersistent: !event.detail.value});\n    };\n\n    handleDrawerClose = () => {\n        if (this.drawer.current && !this.state.drawerPersistent) {\n            this.drawer.current.close();\n        }\n    };\n\n    setTitle = (title: string) => {\n        this.setState({title: title});\n    };\n\n    render() {\n        return (\n            <BrowserRouter basename=\"/\">\n                <Switch>\n                    <Route strict path={process.env.PUBLIC_URL + '/'}>\n                        <HashRouter>\n                            <app-drawer-layout forceNarrow={true} ref={this.layout}>\n                                <app-drawer slot=\"drawer\" swipe-open=\"true\" ref={this.drawer}>\n                                    <Menu closeDrawer={() => this.handleDrawerClose()}/>\n                                </app-drawer>\n                                <app-header-layout>\n                                    <app-header effects=\"waterfall\" reveals slot=\"header\">\n                                        <app-toolbar>\n                                            {!this.state.drawerPersistent &&\n                                            <paper-icon-button drawer-toggle icon=\"menu\"/>}\n                                            <div main-title=\"true\">{this.state.title}</div>\n                                        </app-toolbar>\n                                    </app-header>\n                                    <Switch>\n                                        <Route path={pages.todos.url} render={(props) => <Tabs {...props}\n                                                                                               title={pages.todos.title}\n                                                                                               setTitle={this.setTitle}/>}/>\n                                        <Route path={pages.settings.url} render={(props) => <Settings {...props}\n                                                                                                      title={pages.settings.title}\n                                                                                                      setTitle={this.setTitle}/>}/>\n                                        <Route path={pages.about.url} render={(props) => <About {...props}\n                                                                                                title={pages.about.title}\n                                                                                                setTitle={this.setTitle}/>}/>\n                                        <Redirect to={pages.todos.tabs.all.url}/>\n                                    </Switch>\n                                </app-header-layout>\n                            </app-drawer-layout>\n                        </HashRouter>\n                    </Route>\n                    <Redirect to={process.env.PUBLIC_URL + '/'}/>\n                </Switch>\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default AppComponent;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n    scope?: string;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl, config)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.scss';\nimport {register} from './serviceWorker';\nimport './web-components';\n\nReactDOM.render(<App/>, document.querySelector('#root'));\n\n\nregister({scope: process.env.PUBLIC_URL + '/'});"],"sourceRoot":""}